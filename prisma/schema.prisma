generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider    = "zod-prisma"
  output      = "../src/lib/schema"
  modelSuffix = "Schema"
}

model User {
  id               String   @id @default(cuid())
  emailAddress     String   @unique @map("email_address")
  givenName        String   @map("given_name")
  surname          String
  dateOfBirth      DateTime @map("date_of_birth")
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime @default(now()) @map("updated_at") @db.Timestamp(6)
  stripeCustomerId String?  @map("stripe_customer_id")
  role             String
  auth0Id          String   @unique @map("auth0_id")
  account          Account?

  accountId String @unique

  @@map("users")
}

model Account {
  id               String             @id @default(cuid()) @map("account_id")
  user             User               @relation(fields: [userId], references: [id])
  userId           String             @unique @map("user_id")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  registrationCode RegistrationCode[] @map("registration_code")

  @@map("accounts")
}

model RegistrationCode {
  id        String  @id @default(cuid())
  account   Account @relation(fields: [accountId], references: [id])
  accountId String  @map("account_id")
}

model DirectoryListing {
  practiceId
  profileId  String?
  status
}

model Subscription {
  id                                    Int                                     @id @default(autoincrement()) @map("subscription_id")
  account                               Account?                                @relation(fields: [accountId], references: [id])
  user                                  User?                                   @relation(fields: [userId], references: [id])
  startDate                             DateTime                                @map("start_date")
  endDate                               DateTime                                @map("end_date")
  trialStartDate                        DateTime?                               @map("trial_start_date")
  trialEndDate                          DateTime?                               @map("trial_end_date")
  accountId                             String?                                 @map("account_id") // Missing account id means individual plan
  userId                                Int?                                    @map("user_id") // Missing user id means unclaimed seat
  createdAt                             DateTime                                @default(now()) @map("created_at")
  updatedAt                             DateTime                                @updatedAt @map("updated_at")
  status                                String
  subscriptionBillingProviderIdentifier SubscriptionBillingProviderIdentifier[]
  product                               Product                                 @relation(fields: [productId], references: [id])
  productId                             String                                  @map("product_id")
  invoice                               BillingProviderInvoice[]
  registrationCodeSubscription          RegistrationCodeSubscription[]
  giftCard                              GiftCard[]

  @@map("subscriptions")
}
