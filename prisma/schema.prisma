generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider    = "zod-prisma"
  output      = "../src/lib/schema"
  modelSuffix = "Schema"
}

enum Role {
  provider_coach
  provider_therapist
  member
}

model User {
  id                            String   @id @default(cuid())
  emailAddress                  String   @unique @map("email_address")
  givenName                     String   @map("given_name")
  surname                       String
  dateOfBirth                   DateTime @map("date_of_birth")
  hasAcceptedTermsAndConditions Boolean  @map("has_accepted_terms_and_conditions")
  createdAt                     DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                     DateTime @default(now()) @map("updated_at") @db.Timestamp(6)
  roles                         Role[]
  stripeCustomerId              String?  @unique @map("stripe_customer_id")
  auth0Id                       String   @unique @map("auth0_id")

  account                     Account?                     @relation(fields: [accountId], references: [id])
  accountId                   String?                      @unique
  plans                       Plan[]
  stripeInvoices              StripeInvoice[]
  practiceProviders           PracticeProvider[]
  directoryListingInvitations DirectoryListingInvitation[]
  providerProfile             ProviderProfile?
  practice                    Practice?
  memberProfile               MemberProfile?

  @@map("users")
}

model Account {
  id                 String             @id @default(cuid()) @map("account_id")
  name               String
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  registrationCode   RegistrationCode[]
  registrationCodeId String?            @map("registration_code_id")
  plan               Plan[]
  stripeInvoice      StripeInvoice[]
  practice           Practice[]
  users              User[]

  @@map("accounts")
}

model RegistrationCode {
  id        String  @id @default(cuid())
  account   Account @relation(fields: [accountId], references: [id])
  accountId String  @map("account_id")

  @@map("registration_codes")
}

enum ListingStatus {
  listed
  unlisted
}

model DirectoryListing {
  practice          Practice        @relation(fields: [practiceId], references: [id])
  practiceId        String          @map("practice_id")
  profile           ProviderProfile @relation(fields: [providerProfileId], references: [id])
  providerProfileId String          @unique @map("provider_profile_id")
  status            ListingStatus
  createdAt         DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime        @updatedAt @map("updated_at")

  @@index([practiceId, providerProfileId])
  @@map("directory_listings")
}

enum ProductType {
  subscription_provider
  subscription_member
  session
}

// Stripe subscription statuses: https://stripe.com/docs/api/subscriptions/object#subscription_object-status
enum PlanStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  invalidated // A plan that has been replaced by an updated plan (ie seat count increase)
  unpaid
}

model Plan {
  id                   String          @id @default(cuid())
  seats                Int
  account              Account?        @relation(fields: [accountId], references: [id])
  user                 User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  startDate            DateTime        @map("start_date")
  endDate              DateTime        @map("end_date")
  accountId            String?         @map("account_id") // Missing account id means individual plan
<<<<<<< HEAD
  userId               String          @unique @map("user_id") // Missing user id means unclaimed seat
=======
  userId               String          @map("user_id") // Missing user id means unclaimed seat
  // end
>>>>>>> e482118b431e6e51ded190e93135970f86444f68
  billingUserId        String?         @map("billing_user_id")
  createdAt            DateTime        @default(now()) @map("created_at")
  updatedAt            DateTime        @updatedAt @map("updated_at")
  status               PlanStatus
  stripeCustomerId     String?         @map("stripe_customer_id")
  stripeSubscriptionId String?         @map("stripe_subscription_id")
  stripePriceId        String?         @map("stripe_price_id")
  renews               Boolean         @default(true)
  invoices             StripeInvoice[]

  @@index([stripeCustomerId, stripeSubscriptionId])
  @@map("plans")
}

model StripeInvoice {
  id              String   @id @default(cuid())
  plan            Plan?    @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId          String?  @map("plan_id")
  invoiceId       String   @map("invoice_id") @db.VarChar(255)
  user            User?    @relation(fields: [userId], references: [id])
  userId          String   @map("user_id")
  account         Account? @relation(fields: [accountId], references: [id])
  accountId       String?  @map("account_id")
  status          String
  total           Int
  amountDue       Int      @map("amount_due")
  amountPaid      Int      @map("amoint_paid")
  amountRemaining Int      @map("amount_remaining")
  invoicePdf      String?  @map("invoice_pdf")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@index([invoiceId, userId])
  @@map("billing_provider_invoices")
}

model Practice {
  id               String             @id @default(cuid())
  name             String
  address          String
  address2         String?            @map("address_2")
  city             String
  state            String
  zip              String
  phone            String?
  email            String
  website          String?
  directoryListing DirectoryListing[]
  account          Account?           @relation(fields: [accountId], references: [id])
  accountId        String?            @map("account_id")
  user             User               @relation(fields: [userId], references: [id])
  userId           String             @unique @map("user_id")
  // registrationCode RegistrationCode[] @map("registration_code")

  createdAt                  DateTime                     @default(now()) @map("created_at")
  updatedAt                  DateTime                     @updatedAt @map("updated_at")
  practiceProvider           PracticeProvider[]
  directoryListingInvitation DirectoryListingInvitation[]

  @@map("practices")
}

model PracticeProvider {
  practice   Practice @relation(fields: [practiceId], references: [id])
  practiceId String   @map("practice_id")
  provider   User     @relation(fields: [userId], references: [id])
  userId     String   @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([practiceId, userId])
  @@map("practice_providers")
}

enum InvitationStatus {
  pending
  accepted
  declined
  expired
}

model DirectoryListingInvitation {
  id             String           @id @default(cuid())
  status         InvitationStatus
  practice       Practice         @relation(fields: [practiceId], references: [id])
  practiceId     String           @map("practice_id")
  recipientEmail String           @map("recipient_email")
  sender         User             @relation(fields: [senderId], references: [id])
  senderId       String           @map("sender_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("directory_listing_invitations")
}

enum ProfileType {
  coach
  therapist
}

//credentialing,
//license/npi numbers and types
model ProviderProfile {
  id                         String            @id @default(cuid()) @map("provider_profile_id")
  createdAt                  DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                  DateTime          @updatedAt @map("updated_at") @db.Timestamp(6)
  user                       User?             @relation(fields: [userId], references: [id])
  userId                     String?           @unique @map("user_id")
  bio                        String?           @db.Text
  licenses                   String[]
  npiNumber                  String            @map("npi_number")
  offersSlidingScale         Boolean           @map("offers_sliding_scale")
  profileImageUrl            String?           @map("profile_image_url")
  yearsOfExperience          String            @map("years_of_experience")
  minimumRate                Int               @map("minimum_rate")
  maximumRate                Int?              @map("maximum_rate")
  idealClientDescription     String?           @map("ideal_client_description") @db.Text
  practiceNotes              String?           @map("practice_notes")
  gender                     String
  acceptedInsurances         String[]          @map("accepted_insurances")
  licensedStates             String[]          @map("licensed_states")
  specialties                String[]
  ethnicity                  String[]
  communitiesServed          String[]          @map("communities_served")
  religions                  String[]
  evidenceBasedPractices     String[]          @map("evidence_based_practices")
  modalities                 String[]
  languagesSpoken            String[]          @map("languages_spoken")
  pronouns                   String
  ageGroups                  String[]          @map("age_groups")
  offersInPerson             Boolean           @map("offers_in_person")
  offersMedicationManagement Boolean           @map("offers_medication_management")
  offersPhoneConsultations   Boolean           @map("offers_phone_consultations")
  offersVirtual              Boolean           @default(true) @map("offers_virtual")
  profileType                ProfileType       @map("profile_type")
  directoryListing           DirectoryListing?

  @@map("provider_profiles")
}

model MemberProfile {
  id        String   @id @default(cuid()) @map("member_profile_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  state     String
  insurance String
  userId    String   @unique @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("member_profiles")
}
