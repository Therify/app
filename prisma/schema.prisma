generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider    = "zod-prisma"
  output      = "../src/lib/shared/schema"
  modelSuffix = "Schema"
}

enum Role {
  account_owner
  provider_coach
  provider_therapist
  member
}

model User {
  id                            String   @id @unique
  emailAddress                  String   @unique @map("email_address")
  givenName                     String   @map("given_name")
  surname                       String
  dateOfBirth                   DateTime @map("date_of_birth")
  hasAcceptedTermsAndConditions Boolean  @map("has_accepted_terms_and_conditions")
  createdAt                     DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                     DateTime @default(now()) @map("updated_at") @db.Timestamp(6)
  roles                         Role[]
  stripeCustomerId              String?  @unique @map("stripe_customer_id")
  stripeConnectAccountId        String?  @unique @map("stripe_connect_account_id")

  managedAccount             Account?                     @relation("managedAccount")
  account                    Account?                     @relation("users", fields: [accountId], references: [id])
  accountId                  String?
  stripeInvoices             StripeInvoice[]
  practiceProviderInvitation PracticeProviderInvitation[]
  providerProfile            ProviderProfile?
  practiceProvider           PracticeProvider?
  chatAccessToken            String?                      @map("chat_access_token")

  memberProfile          MemberProfile?
  selfAssessments        SelfAssessment[]
  connectionRequests     ConnectionRequest[]
  managedPractice        Practice?
  memberChannels         Channel[]           @relation("member")
  providerChannels       Channel[]           @relation("provider")
  memberSessionInvoice   SessionInvoice[]    @relation("member")
  providerSessionInvoice SessionInvoice[]    @relation("provider")
  redeemedSessions       RedeemedSession[]

  @@map("users")
}

model Account {
  id                 String             @id @default(cuid()) @map("account_id")
  name               String
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  registrationCode   RegistrationCode[]
  registrationCodeId String?            @map("registration_code_id")
  plans              Plan[]
  stripeInvoices     StripeInvoice[]
  users              User[]             @relation("users")
  accountOwner       User?              @relation("managedAccount", fields: [accountOwnerId], references: [id])
  accountOwnerId     String?            @unique @map("account_owner_id")

  @@map("accounts")
}

model RegistrationCode {
  id        String  @id @default(cuid())
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String  @map("account_id")

  @@map("registration_codes")
}

enum ListingStatus {
  listed
  unlisted
  // TODO: Do we want to validate profiles prior to listing?
  pending
}

model DirectoryListing {
  practice          Practice        @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  practiceId        String          @map("practice_id")
  profile           ProviderProfile @relation(fields: [providerProfileId], references: [id], onDelete: Cascade)
  providerProfileId String          @unique @map("provider_profile_id")
  status            ListingStatus
  createdAt         DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime        @updatedAt @map("updated_at")

  @@index([practiceId, providerProfileId])
  @@map("directory_listings")
}

enum ProductType {
  subscription_provider
  subscription_member
  session
}

// Stripe subscription statuses: https://stripe.com/docs/api/subscriptions/object#subscription_object-status
enum PlanStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  invalidated // A plan that has been replaced by an updated plan (ie seat count increase)
  unpaid
}

model Plan {
  id                   String            @id @default(cuid())
  seats                Int
  account              Account?          @relation(fields: [accountId], references: [id])
  startDate            DateTime          @map("start_date")
  endDate              DateTime          @map("end_date")
  accountId            String?           @map("account_id") // Missing account id means individual plan
  billingUserId        String?           @map("billing_user_id")
  createdAt            DateTime          @default(now()) @map("created_at")
  updatedAt            DateTime          @updatedAt @map("updated_at")
  status               PlanStatus
  stripeCustomerId     String?           @map("stripe_customer_id")
  stripeSubscriptionId String?           @map("stripe_subscription_id")
  stripePriceId        String?           @map("stripe_price_id")
  renews               Boolean           @default(true)
  invoices             StripeInvoice[]
  coveredSessions      Int               @default(0) @map("covered_sessions")
  practice             Practice?         @relation(fields: [practiceId], references: [id])
  practiceId           String?
  redeemedSessions     RedeemedSession[]

  @@index([stripeCustomerId, stripeSubscriptionId])
  @@map("plans")
}

model StripeInvoice {
  id              String          @id @default(cuid())
  plan            Plan?           @relation(fields: [planId], references: [id])
  planId          String?         @map("plan_id")
  invoiceId       String          @map("invoice_id") @db.VarChar(255)
  user            User?           @relation(fields: [userId], references: [id])
  userId          String          @map("user_id")
  account         Account?        @relation(fields: [accountId], references: [id])
  accountId       String?         @map("account_id")
  status          String
  total           Int
  amountDue       Int             @map("amount_due")
  amountPaid      Int             @map("amoint_paid")
  amountRemaining Int             @map("amount_remaining")
  invoicePdf      String?         @map("invoice_pdf")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  invoiceNumber   String?         @map("invoice_number")
  SessionInvoice  SessionInvoice?

  @@index([invoiceId, userId])
  @@map("billing_provider_invoices")
}

enum SessionInvoiceStatus {
  draft
  open
  void
  paid
  uncollectible
}

model SessionInvoice {
  id            String               @id @default(cuid())
  invoice       StripeInvoice        @relation(fields: [invoiceId], references: [id])
  invoiceId     String               @unique @map("invoice_id")
  status        SessionInvoiceStatus
  dateOfSession DateTime?            @map("date_of_session")
  createdAt     DateTime             @default(now()) @map("created_at")
  updatedAt     DateTime             @updatedAt @map("updated_at")
  providerId    String               @map("provider_id")
  provider      User                 @relation("provider", fields: [providerId], references: [id])
  memberId      String               @map("member_id")
  member        User                 @relation("member", fields: [memberId], references: [id])

  @@map("session_invoices")
}

enum RedeemedSessionStatus {
  claimed
  available
  voided
}

model RedeemedSession {
  id                  String                @id @default(cuid())
  plan                Plan                  @relation(fields: [planId], references: [id])
  planId              String                @map("plan_id")
  memberId            String                @map("member_id")
  profileId           String?               @map("profile_id")
  providerProfile     ProviderProfile?      @relation(fields: [profileId], references: [id])
  practiceId          String?               @map("practice_id")
  practice            Practice?             @relation(fields: [practiceId], references: [id])
  member              User                  @relation(fields: [memberId], references: [id])
  status              RedeemedSessionStatus
  dateOfSession       DateTime              @map("date_of_session")
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  jotformSubmissionId String?               @map("jotform_submission_id")

  @@map("redeemed_sessions")
}

model Practice {
  id               String             @id @default(cuid())
  name             String
  address          String
  address2         String?            @map("address_2")
  city             String
  state            String
  zip              String
  country          String             @default("US")
  phone            String?
  email            String
  website          String?
  directoryListing DirectoryListing[]
  practiceOwner    User               @relation(fields: [practiceOwnerId], references: [id])
  practiceOwnerId  String             @unique @map("practice_owner_id")
  plans            Plan[]

  createdAt                  DateTime                     @default(now()) @map("created_at")
  updatedAt                  DateTime                     @updatedAt @map("updated_at")
  practiceProvider           PracticeProvider[]
  practiceProviderInvitation PracticeProviderInvitation[]
  practiceProfile            PracticeProfile[]
  redeemedSessions           RedeemedSession[]

  @@map("practices")
}

model PracticeProvider {
  practice   Practice @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  practiceId String   @map("practice_id")
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([practiceId, userId])
  @@map("practice_providers")
}

model PracticeProfile {
  practice   Practice        @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  practiceId String          @map("practice_id")
  profile    ProviderProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId  String          @unique @map("profile_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([practiceId, profileId])
  @@map("practice_profiles")
}

enum InvitationStatus {
  pending
  accepted
  declined
  expired
}

model PracticeProviderInvitation {
  id             String           @id @default(cuid())
  status         InvitationStatus
  practice       Practice         @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  practiceId     String           @map("practice_id")
  recipientEmail String           @map("recipient_email")
  sender         User             @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId       String           @map("sender_id")
  profile        ProviderProfile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId      String?          @map("profile_id")
  expiresAt      DateTime?        @map("expires_at")
  designation    ProfileType

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("practice_provider_invitations")
}

enum ProfileType {
  coach
  therapist
}

enum NewClientStatus {
  accepting
  waitlist
  not_accepting
}

model ProviderProfile {
  id                         String                       @id @default(cuid()) @map("provider_profile_id")
  givenName                  String                       @map("given_name")
  surname                    String                       @map("surname")
  contactEmail               String                       @map("contact_email")
  createdAt                  DateTime                     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                  DateTime                     @updatedAt @map("updated_at") @db.Timestamp(6)
  user                       User?                        @relation(fields: [userId], references: [id])
  userId                     String?                      @unique @map("user_id")
  bio                        String?                      @db.Text
  npiNumber                  String?                      @map("npi_number")
  offersSlidingScale         Boolean                      @default(false) @map("offers_sliding_scale")
  videoUrl                   String?                      @map("video_url")
  profileImageUrl            String?                      @map("profile_image_url")
  yearsOfExperience          String?                      @map("years_of_experience")
  stripeSessionPriceId       String?                      @unique @map("stripe_price_id")
  minimumRate                Int                          @map("minimum_rate")
  maximumRate                Int?                         @map("maximum_rate")
  idealClientDescription     String?                      @map("ideal_client_description") @db.Text
  practiceNotes              String?                      @map("practice_notes")
  gender                     String
  credentials                Json[]
  acceptedInsurances         Json[]                       @map("accepted_insurances")
  supervisor                 Json?
  specialties                String[]
  isMultiracial              Boolean                      @default(false) @map("is_multiracial")
  ethnicity                  String[]
  communitiesServed          String[]                     @map("communities_served")
  religions                  String[]
  evidenceBasedPractices     String[]                     @map("evidence_based_practices")
  modalities                 String[]
  languagesSpoken            String[]                     @map("languages_spoken")
  pronouns                   String
  ageGroups                  String[]                     @map("age_groups")
  offersInPerson             Boolean                      @default(false) @map("offers_in_person")
  offersMedicationManagement Boolean                      @default(false) @map("offers_medication_management")
  offersPhoneConsultations   Boolean                      @default(false) @map("offers_phone_consultations")
  offersVirtual              Boolean                      @default(true) @map("offers_virtual")
  designation                ProfileType                  @map("profile_type")
  newClientStatus            NewClientStatus              @default(not_accepting) @map("new_client_status")
  directoryListing           DirectoryListing?
  practiceStartDate          DateTime?                    @map("practice_start_date") @db.Timestamp(6)
  invitations                PracticeProviderInvitation[]
  memberFavorites            MemberFavorites[]
  practiceProfile            PracticeProfile?
  connectionRequests         ConnectionRequest[]
  offersChat                 Boolean                      @default(false) @map("offers_chat")
  redeemedSessions           RedeemedSession[]

  @@map("provider_profiles")
}

model MemberProfile {
  id        String   @id @default(cuid()) @map("member_profile_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  state     String
  country   String   @default("US")
  insurance String
  concerns  String[]
  goals     String[]
  userId    String   @unique @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("member_profiles")
}

model SelfAssessment {
  id                  String   @id @default(cuid()) @map("self_assessment_id")
  userId              String?  @map("user_id")
  preferences         Json     @default("{}")
  concerns            String[]
  isLGBTQ             Boolean  @default(false) @map("is_lgbtq")
  isCaregiver         Boolean  @default(false) @map("is_caregiver")
  isInCrisis          Boolean  @default(false) @map("is_in_crisis")
  hasSuicidalIdeation Boolean  @default(false) @map("has_suicidal_ideation")
  phq9Score           Int      @default(0) @map("phq9_score")

  createdAt DateTime @default(now()) @map("created_at")
  User      User?    @relation(fields: [userId], references: [id])

  @@map("self_assessments")
}

model MemberFavorites {
  memberId        String          @map("member_id")
  profileId       String          @map("profile_id")
  providerProfile ProviderProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt       DateTime        @default(now()) @map("created_at")

  @@id([memberId, profileId])
  @@map("member_favorites")
}

enum ConnectionStatus {
  pending
  accepted
  declined
  terminated
}

model ConnectionRequest {
  memberId          String           @map("member_id")
  profileId         String           @map("profile_id")
  providerProfile   ProviderProfile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  member            User             @relation(fields: [memberId], references: [id], onDelete: Cascade)
  connectionMessage String?          @map("connection_message") @db.Text
  connectionStatus  ConnectionStatus @default(pending) @map("connection_status")
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")

  @@id([memberId, profileId])
  @@map("connection_requests")
}

model Channel {
  id String @id @map("channel_id")

  providerId String @map("provider_id")
  memberId   String @map("member_id")

  member    User     @relation("member", fields: [memberId], references: [id])
  provider  User     @relation("provider", fields: [providerId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")

  @@map("channels")
}
